run_sfxc.py
----------
Usage: run_sfxc.py <vex_file> [<ctrl_file>]
The default value for the control file is the vex-file with extension ".ctrl"

If the control file does not exist, a default ctrl file will be generated and
an editor will be opened to fill in the missing data fields.

The script then starts the correlator and runs produce_html_plotpage after the
software correlator finished.  

produce_html_plotpage
---------------------
Usage: produce_html_plotpage [-f] <vex-file> \
          <correlation_file> [<output_directory>]
          
Generates the html-pages used for the ftp-fringe tests. 

Options:
  -f With this option produce_html_plotpage doesn't after generating the 
     html-page continues reading in new integration slices and plots those.


produce_html_diffpage
---------------------
Usage: produce_html_diffpage <vex-file> \
          <correlation_file1> <correlation_file2> [<output_directory>]

Shows the difference between two correlation output files. 
Very similar to produce_html_plotpage

vumeter.py
----------
Usage: vumenter.py
You should run this script in the directory where you started the software
correlator

The script shows a text-based progress page in the console while the software
correlator runs.

generate_delay_model (in utils/delay)
--------------------
Usage: generate_delay_model <vexfile> <stationname> <outputfile>
Depends on the environment variable CALC_DIR which should contain
  ocean.dat, tilt.dat and DE405_le.jpl
  
The utility generates the delay model for the station <stationname> and the 
experiment described by the vexfile. The output is written to file.

vex2ccf
-------
Generates a skeleton for a ctrl-file from a vex file
Usage: vex2ccf [--full|-f] [--das3] <vex-file> <ctrl-file>

Options:
  --full, -f: generate more information, that can be used by the work flow
              manager
  --das3:     addes a das3 specific section


baseline_info
-------------
Prints out information about all integrations of one baseline
Usage: baseline_info <cor-file> <ch_nr> <sideband> <st_nr1> <pol1> <st_nr2> <pol2>

All arguments, except for the cor-file, are the values as found in the
  baseline-header
  
The output is a table with a row for every integration containing:
  - The location of the fringe
  - The phase of the fringe
  - The absolute value of the fringe
  - The phase of the center lag
  - The absolute value of the center lag
  - The signal to noise ratio
  - the weight


phase_plot
----------
Usage: phase_plot <cor-file>
Writes out the phase of the fringe for every timeslice
Each row contains the phases for every baseline, in the order that they occur 
in the correlation file

plot_delay_table
----------------
converts a binary delay table to an interpolated ascii table
Usage: plot_delay_table <delay-table> <plot-file>

each row contains a value for the time and the delay. 
Scans are separated with an extra newline, which makes gnuplot draw a new curve.

mark5a_print_headers
--------------------
Prints the timestamps in the headers of a mark5a file
Usage: mark5a_print_headers <mark5a-file>

print_new_output_format
-----------------------
Usage: print_new_output_format <cor-file>

Prints out all headers in the output correlation file to std::cout and 
writes the data to the file "output_new.txt".


generate_uvw_coordinates
------------------------
Usage: generate_uvw_coordinates <delay-file> <start> <stop> <integration-time> <output-file>

Generates a file with ascii uvw coordinates from a delay file

make_anim
---------
Usage: make_anim <ctrl-file> <station1_nr> <station2_nr>

Makes an animated gif displaying the evolution of the fringe of a certain
baseline over time

  
extract_channelizer
-------------------
Extract the channel bit-organization from the file involved in an
experiment. This information is then used to generate a 
optimized channel_extractor that can then be loaded by sfxc
speeding its input_node processing by a factor of two.
