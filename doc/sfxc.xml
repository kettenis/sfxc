<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
               "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY sfxc "<application><acronym>SFXC</acronym></application>">
]>

<book>

<bookinfo>
<title>&sfxc; User's Manual</title>
<author>
<firstname>Mark</firstname>
<surname>Kettenis</surname>
<affiliation><orgname>JIVE</orgname></affiliation>
</author>
</bookinfo>

<chapter>
<title>Running the &sfxc; correlator</title>

<para>
&sfxc; is an <acronym>MPI</acronym> application.  This means that
running it is somewhat dependent on the <acronym>MPI</acronym>
implementation installed on your system.  The instructions here are
for OpenMPI, which currently seems to be the most popular Open Source
MPI implementation for Linux systems.

<screen>
<prompt>$</prompt> <command>mpirun --machinefile <parameter>machinefile</parameter> --rankfile <parameter>rankfile</parameter> --np <parameter>np</parameter> sfxc <parameter>controlfile</parameter> <parameter>vexfile</parameter> </command>
</screen>

where <parameter>controlfile</parameter> is the name of the correlator
control file that describes the correlation
parameters, <parameter>vexfile</parameter> is the name of the VEX file
that describes the experiment, <parameter>np</parameter> is the number of
MPI processes to start as described by the machine
file <parameter>machinefile</parameter> and rank
file <parameter>rankfile</parameter>.
</para>

<para>
When creating the rank file, there are a few things that need to be
taken into account.

The process with rank 0 becomes the manager process.  Since the manager
process doesn't really do a lot, there is no point in assigning more than
a single slot to it.

The process with rank 1 becomes the log process.  As with the manager
process, there is no point in assigning more than a single slot.

The process with rank 2 becomes the output process.  This process will be
able to take advantage of multiple cores, so assigning two slots is a
good idea if you expect a significant output data rate.

At JIVE we usually run all these processes on the cluster head node.
</para>

<para>
The processes starting at rank 3 become input processes.  There will
be one input process for each station in the correrlation.  When
correlating directly from Mark5 disk packs, these processes will need
to run on the Mark5s containing the diskpacks for those stations.
When correlating from files, these processes will need to run on
machines that have access to the data files for these stations.

The process with rank 3 will be assigned to the station that comes
first when the stations are ordered alphabetically by station code.
The process with rank 4 will be assigned to the station that comes
second, etc.

The input processes do the unpacking and corner turning of the input
data, which can be cpu intensive.  So assigning multiple slots is a
good idea.  By default the unpacking happens in two seperate threads,
so using two or three slots makes sense.
</para>

<para>
The remainder of the processes will be assigned to correlations
processes.  A single slot is sufficient for these processes.
</para>

<example><title>Rank file example</title>
<programlisting>
rank 0=head slot=0
rank 1=head slot=1
rank 2=head slot=2,3
rank 3=sfxc-d2 slot=0,1
rank 4=sfxc-d2 slot=2,3
rank 5=sfxc-d3 slot=0,1
rank 6=sfxc-a0 slot=0
rank 7=sfxc-a1 slot=0
...
rank 36=sfxc-a2 slot=7
rank 37=sfxc-a3 slot=7
</programlisting>
</example>

<para>
&sfxc; will automatically generate delay tables using the CALC10 code
that's included in the distribution.  The CALC10 needs some additional
input files to do its work.  These are the JPL Solar System Ephemeris
(<filename>DE405_le.jpl</filename>), ocean loading information
(<filename>ocean.dat</filename>) and antenna tilt
(<filename>tilt.dat</filename>).  It expects to find these in a
directory pointed to by the <envar>CALC_DIR</envar> environment
variable.  A copy of <filename>DE405_le.jpl</filename> as well as
ocean loading and antenna tilt information for many antennas that
co-observe with the European VLBI Network (EVN) can be found
in <filename>sfxc/lib/calc10/data</filename> in the source
distribution.
</para>

</chapter>

<chapter>
<title>The correlator control file</title>

<para>
The correlator control file uses the JavaScript Object Notation (JSON)
format.  It is constumary to give these files
a <filename>.ctrl</filename> extension.
</para>

<variablelist>
  <varlistentry>
    <term><varname>output_file</varname></term>
    <listitem>
      <para>
	A string specifying the name of the file to write the
	correltor output to.  It is costumary to give this file
	a <filename>.cor</filename> extension.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>number_channels</varname></term>
    <listitem>
      <para>
	An integer specifying the number of desired spectral channels
	in the correlator output.  Has to be power of two.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>integr_time</varname></term>
    <listitem>
      <para>
	A floating-point number specifying the integration time in
	seconds.  Currently needs to be a power of two (but the
	exponent can be negative, so 0.5, 0.25, etc. are allowed).
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>cross_polarize</varname></term>
    <listitem>
      <para>
	A boolean indicating whether cross hands should be calculated
	or not.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>stations</varname></term>
    <listitem>
      <para>
	A list of strings specifying the stations that are to be correlated.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>data_sources</varname></term>
    <listitem>
      <para>
	An object containing a list of strings for each station
	specifying the data source locations for each station.  Each
	data source location is specified in the form of a Uniform
	Resource Identifier (URI).  To correlate data from plain
	files, the standard <uri>file</uri> scheme can be used.
	Correlating data directly from Mark5 disk packs is achieved by
	specifying an appropriate <uri>mk5:</uri> URI.  All URIs for a
	single station must use the same scheme.  Specifying multiple
	URIs for a single station is currently only supported for
	the <uri>file</uri> scheme.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>start</varname></term>
    <listitem>
      <para>
	A string specifying the start time of the correlation.  The
	time should be specified in VEX (####y###d##h##m##s) format
	representing UTC.  For real-time correlation the
	string <literal>"now"</literal> can be used, which will
	instruct the correlator to use the current wall clock time (in
	UTC) as the start time.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>stop</varname></term>
    <listitem>
      <para>
	A string specifying the end time of the correlation.  The
	time should be specified in VEX (####y###d##h##m##s) format
	representing UTC.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>exper_name</varname></term>
    <listitem>
      <para>
	A string specifying the experiment name.  Used for generating
	and referencing the appropriate delay tables.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><varname>delay_directory</varname></term>
    <listitem>
      <para>
	A string specifying the directory in which to store the delay tables.
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
An example of a control file is given below:
</para>

<example><title>Control file example</title>
<programlisting>
{
    "exper_name": "F13C4", 
    "cross_polarize": true, 
    "number_channels": 256, 
    "integr_time": 1, 
    "output_file": "file:///home/kettenis/test/f13c4/f13c4_no0023.cor", 
    "stations": [
        "Eb", 
        "Fd", 
        "Nl"
    ], 
    "data_sources": {
        "Nl": [
            "file:///scratch/kettenis/f13c4/f13c4_nl_no0023.m5b"
        ], 
        "Eb": [
            "file:///scratch/kettenis/f13c4/f13c4_eb_no0023.m5b"
        ], 
        "Fd": [
            "file:///scratch/kettenis/f13c4/f13c4_fd_no0023.m5b"
        ]
    }, 
    "start": "2013y148d10h29m26s", 
    "stop": "2013y148d10h34m06s", 
    "delay_directory": "file:///home/kettenis/test/f13c4/delays"
}
</programlisting>
</example>

</chapter>

<chapter>
<title>Preparing your VEX file</title>

<para>
Some information needs to be provided in the VEX file that is
typically not emitted by the scheduling software.  It is essential
that you have $CLOCK and $EOP blocks.  Some of the tools distributed
with SFXC also use the $TAPELOG_OBS block.  We recommend that in the
$EOP block you provide entries at a 24 hour intervals and have an
additional entry for the day before and the day after the observation.
All these blocks need to be properly referenced; from the $GLOBAL
block for $EOP and from the $STATION block fot the $CLOCK and $EOP
blocks.
</para>

<para>
It is important that the description of the data format in the VEX
file is correct.  &sfxc; currently supports the Mark4, VLBA, Mark5B
and VDIF data format and includes some heuristics to determine the
correct data format from the VEX file.  If &sfxc; crashes, seems to
hang or complains it cannot find any valid data, please check that the
data format description in your VEX file matches reality.
</para>

<variablelist>
  <varlistentry>
    <term>Mark4</term>
    <listitem>
      <para>
        record_transport_type should be set to Mark5A and
	electronics_rack_type should be set to Mark4 or VLBA4 in the
	$DAS block; track_frame_format should be set to Mark4 in the
	$TRACKS section
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>VLBA</term>
    <listitem>
      <para>
	record_transport_type should be set to Mark5A and
	electronics_rack_type should be set to VLBA in the $DAS block;
	track_frame_format should be set to VLBA in the $TRACKS
	section
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Mark5B</term>
    <listitem>
      <para>
	record_transport_type should be set to Mark5B in the $DAS
	block, and either a $TRACKS setion should be present and have
	its track_frame_format keyword set to Mark5B
	<footnote>
	  <para>
	  SCHED spells this as MARK5B, which is tolerated by &sfxc;
	  </para>
	</footnote>
	, or a $BITSTREAMS block must be present as proposed for the
	upcoming VEX 2 standard.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>VDIF</term>
    <listitem>
      <para>
	VEX 1.5 does not provide the means to properly specify VDIF as
	the recording format.  Current versions of $sfxc; recognize
	the $THREADS block as proposed for the new VEX 2 standard by
	Walter Brisken from NRAO.
	<footnote>
	  <para>
	    <ulink url="https://safe.nrao.edu/wiki/bin/view/VLBA/Vex2doc#A_61_36THREADS_61_Block"><uri>https://safe.nrao.edu/wiki/bin/view/VLBA/Vex2doc#A_61_36THREADS_61_Block</uri></ulink>
	  </para>
	</footnote>
	However this proposal has been withdrawn in favour of a new
	$DATASTREAMS block.  The intention is to have &sfxc; recognize
	$DATASTREAMS blocks once the final VEX 2 standard arrives.  In
	the meantime a $THREADS block will need to be added, as SCHED
	doesn't do this.
      </para>
      <para>
	record_transport_type should be set to Mark5C or VDIF in the
	$DAS block.  If the record_transport_type is set to Mark5C,
	electronics_rack_type must be WIDAR.  A $THREADS block must be
	present.
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
&sfxc; has been tested extensively with VEX output from (NRAO) SCHED.
Your mileage may vary with output from other VLBI scheduling software.
</para>

</chapter>

<chapter>
<title>Post-processing</title>

<para>
As with the Mark4 hardware correlator, &sfxc; output is converted into
an AIPS++/CASA MeasurementSet using the <command>j2ms2</command>
program.  Create a directory with the name of experiment as given in
the VEX file.  Copy the VEX file into this directory and rename it to
<filename><parameter>experiment</parameter>.vix</filename>
where <parameter>experiment</parameter> is again the name of the
experiment as given in the VEX file.

<screen>
<prompt>$</prompt> <command>j2ms2 <parameter>file</parameter> ...</command>
</screen>

where <parameter>file</parameter> is the name of the correlator output
file.  This will produce a MeasurementSet
named <filename><parameter>experiment</parameter>.ms</filename>.  It
is possible to specify multiple correlator output files on
the <command>j2ms2</command> command line.  The visibilities in these
files are simply concatenated and written out into a single
MeasurementSet.
</para>

<para>
To convert data into FITS-IDI such that it can be read into AIPS,
the <command>tConvert</command> program can be used.

<screen>
<prompt>$</prompt> <command>tConvert <parameter>experiment</parameter>.ms <parameter>experiment</parameter>.IDI </command>
</screen>

The resulting FITS-IDI can be read directly into AIPS using <command>FITLD</command>.
</para>

<para>
Note that at JIVE we run some additional post-processing tools on the
MeasurementSet before converting data into FITS-IDI.  The most
important things are:
<itemizedlist>
<listitem>
<para>
Amplitude correction for a-bit data;
currently <command>j2ms2</command> assumes all data is 2-bit.
</para>
</listitem>
<listitem>
<para>
Flagging of delay-rate zero events.
</para>
</listitem>
<listitem>
<para>
Flagging of data with low weights.
</para>
</listitem>
</itemizedlist>
If you correlate and convert your own data, you may have to take care
of these things when reducing the data in AIPS.
</para>

</chapter>

</book>
