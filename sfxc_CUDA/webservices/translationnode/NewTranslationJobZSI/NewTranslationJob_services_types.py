################################################## 
# NewTranslationJob_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://jobinfo.broker.remote.expres.psnc.pl/xsd
##############################

class ns1:
    targetNamespace = "http://jobinfo.broker.remote.expres.psnc.pl/xsd"

    class JobInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://jobinfo.broker.remote.expres.psnc.pl/xsd"
        type = (schema, "JobInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.JobInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"brokerLocation"), aname="_brokerLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"chunkSize"), aname="_chunkSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"experimentName"), aname="_experimentName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"gridFtpLocation"), aname="_gridFtpLocation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"telescopeName"), aname="_telescopeName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._brokerLocation = None
                    self._chunkSize = None
                    self._endTime = None
                    self._experimentName = None
                    self._gridFtpLocation = None
                    self._startTime = None
                    self._telescopeName = None
                    return
            Holder.__name__ = "JobInfo_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://jobinfo.broker.remote.expres.psnc.pl/xsd)

##############################
# targetNamespace
# http://broker.remote.expres.psnc.pl/xsd
##############################

class ns0:
    targetNamespace = "http://broker.remote.expres.psnc.pl/xsd"

    class startTranslationJob_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "startTranslationJob"
        schema = "http://broker.remote.expres.psnc.pl/xsd"
        def __init__(self, **kw):
            ns = ns0.startTranslationJob_Dec.schema
            TClist = [GTD("http://jobinfo.broker.remote.expres.psnc.pl/xsd","JobInfo",lazy=False)(pname=(ns,"param0"), aname="_param0", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://broker.remote.expres.psnc.pl/xsd","startTranslationJob")
            kw["aname"] = "_startTranslationJob"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._param0 = None
                    return
            Holder.__name__ = "startTranslationJob_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://broker.remote.expres.psnc.pl/xsd)
