dnl Process this file with autoconf to produce a configure script.
AC_INIT(JIVE software correlator, 0.0.3)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(sfxc, 0.0.2)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_F77
AC_PROG_INSTALL
AC_PROG_RANLIB

AC_LANG_CPLUSPLUS

dnl Checking generic c libraries
AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(pthread, sem_init)

dnl setting flags for sfxc
SFXC_CXXFLAGS='-I${top_srcdir}/include '
SFXC_LDADD=' '

dnl backup of generic flags
CXXFLAGS_IN=$CXXFLAGS
CFLAGS_IN=$CFLAGS
LDFLAGS_IN=$LDFLAGS
LIBS_IN=$LIBS

dnl ---------------------------------------------------------------------------
dnl Checking external libraries
dnl ---------------------------------------------------------------------------

dnl MPI and the math library
dnl AC_CHECK_LIB(mpich, MPI_Init, [], [
dnl         echo "Couldn't find mpi library."
dnl         ])
dnl MPICH_CXXFLAGS=
dnl MPICH_LDADD=" -lmpich"
dnl AC_SUBST(MPICH_CXXFLAGS)
dnl AC_SUBST(MPICH_LDADD)
dnl SFXC_CXXFLAGS="$SFXC_CXXFLAGS $MPICH_CXXFLAGS"
dnl SFXC_LDADD="$SFXC_LDADD $MPICH_LDADD"

dnl resetting generic flags
CXXFLAGS=$CXXFLAGS_IN
CFLAGS=$CFLAGS_IN
LDFLAGS=$LDFLAGS_IN

dnl Check for fftw
AC_CHECK_LIB(fftw3, fftw_execute, [], [
        echo "Couldn't find fftw3 library."
        exit -1
        ])
AC_CHECK_LIB(fftw3f, fftwf_execute, [], [
        echo "Couldn't find fftw3 library."
        exit -1
        ])
FFTW_CXXFLAGS=
FFTW_LDADD=" -lfftw3 -lfftw3f"
AC_SUBST(FFTW_CXXFLAGS)
AC_SUBST(FFTW_LDADD)
SFXC_CXXFLAGS="$SFXC_CXXFLAGS $FFTW_CXXFLAGS"
SFXC_LDADD="$SFXC_LDADD $FFTW_LDADD"

dnl resetting generic flags
CXXFLAGS=$CXXFLAGS_IN
CFLAGS=$CFLAGS_IN
LDFLAGS=$LDFLAGS_IN

LIBS=$LIBS_IN



dnl ---------------------------------------------------------------------------
dnl setting shipped libraries
dnl ---------------------------------------------------------------------------

dnl setting Damien's libraries
DAMIEN_CXXFLAGS='-I${top_srcdir}/lib/common/src -I${top_srcdir}/lib/containers/src -I${top_srcdir}/lib/netlib/src -I${top_srcdir}/lib/testunit/src '
DAMIEN_LDADD='-L${top_srcdir}/lib/testunit -ltestunit -L${top_srcdir}/lib/netlib -lnetlib -L${top_srcdir}/lib/containers -lcontainers -L${top_srcdir}/lib/common -lcommon '
AC_SUBST(DAMIEN_CXXFLAGS)
AC_SUBST(DAMIEN_LDADD)
SFXC_CXXFLAGS="$SFXC_CXXFLAGS $DAMIEN_CXXFLAGS"
SFXC_LDADD="$SFXC_LDADD $DAMIEN_LDADD"


dnl setting json-cpp
JSONCPP_CXXFLAGS=' -I${top_srcdir}/lib/jsoncpp/include '
JSONCPP_LDADD=' -L${top_srcdir}/lib/jsoncpp -ljsoncpp '
AC_SUBST(JSONCPP_CXXFLAGS)
AC_SUBST(JSONCPP_LDADD)

SFXC_CXXFLAGS="$SFXC_CXXFLAGS $JSONCPP_CXXFLAGS"
SFXC_LDADD="$SFXC_LDADD $JSONCPP_LDADD"


dnl setting gsl
dnl first check gslcblas
AC_CHECK_LIB([gslcblas],[cblas_dgemm])
AC_CHECK_LIB([gsl],[gsl_blas_dgemm],
dnl found gsl, use the global version
GSL_CXXFLAGS=''
GSL_LDADD='-lgsl -lgslcblas'
HAS_GSL='yes'
,
dnl gsl not found, install a local copy
GSL_CXXFLAGS='-I${top_srcdir}/lib/gsl/install/include '
GSL_LDADD='-L${top_srcdir}/lib/gsl/install/lib -lgsl -lgslcblas'
HAS_GSL='no'
)

AC_SUBST(GSL_CXXFLAGS)
AC_SUBST(GSL_LDADD)
AC_SUBST(HAS_GSL)

SFXC_CXXFLAGS="$SFXC_CXXFLAGS $GSL_CXXFLAGS"
SFXC_LDADD="$SFXC_LDADD $GSL_LDADD"

dnl resetting generic flags
CXXFLAGS=$CXXFLAGS_IN
CFLAGS=$CFLAGS_IN
LDFLAGS=$LDFLAGS_IN
LIBS=$LIBS_IN

dnl setting vex_parser
VEX_PARSER_CXXFLAGS='-I${top_srcdir}/lib/vex_parser/install/include '
VEX_PARSER_LDADD='-L${top_srcdir}/lib/vex_parser/install/lib -lvex_parser '
AC_SUBST(VEX_PARSER_CXXFLAGS)
AC_SUBST(VEX_PARSER_LDADD)

SFXC_CXXFLAGS="$SFXC_CXXFLAGS $VEX_PARSER_CXXFLAGS"
SFXC_LDADD="$SFXC_LDADD $VEX_PARSER_LDADD"

dnl setting boost
BOOST_CXXFLAGS='-I${top_srcdir}/lib/boost/include '
AC_SUBST(BOOST_CXXFLAGS)

SFXC_CXXFLAGS="$SFXC_CXXFLAGS $BOOST_CXXFLAGS"

dnl exporting sfxc flags
AC_SUBST(SFXC_CXXFLAGS)
AC_SUBST(SFXC_LDADD)


dnl ---------------------------------------------------------------------------
dnl Checking for ./configure options
dnl ---------------------------------------------------------------------------
dnl debug
AC_ARG_ENABLE(debug,
              [  --enable-debug          Enable debugging information],
              USE_DEBUG="$enableval", USE_DEBUG="no")

if test $USE_DEBUG = "yes"; then 
  CFLAGS="$CFLAGS -g -DSFXC_PRINT_DEBUG -rdynamic"
  CXXFLAGS="$CXXFLAGS -g -DSFXC_PRINT_DEBUG -rdynamic"
fi


dnl optimization
AC_ARG_ENABLE(optimization,
              [  --enable-optimization        Enable compiler optimizations],
              USE_OPTIMIZATION="$enableval", USE_OPTIMIZATION="no")

if test $USE_OPTIMIZATION = "yes"; then 
  CFLAGS="$CFLAGS -O2"
  CXXFLAGS="$CXXFLAGS -O2"
fi


dnl export these variable (so Makefile substitutions
dnl can be made.
AC_SUBST(CFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LDADD)

AC_OUTPUT(Makefile
          lib/Makefile
          lib/calc10/Makefile
          lib/calc10/lib/Makefile
          lib/calc10/src/Makefile
          lib/common/Makefile
          lib/containers/Makefile
          lib/netlib/Makefile
          lib/testunit/Makefile
          lib/jsoncpp/Makefile
          lib/gsl/Makefile
          lib/vex_parser/Makefile
          src/Makefile
          test/Makefile
          include/Makefile
          utils/Makefile
          utils/delay/Makefile
          doc/Makefile
          doc/html/Makefile
         )

