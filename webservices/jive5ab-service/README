Prerequisites
-------------

The jive5ab service uses a new VEX parser that is now purely
implemented in Python.  It is mostly compatible with the old VEX
parser that is distributed together with the SFXC software correlator.
The new VEX parser can be downloaded from the NEXPReS WiKi:

  <http://www.jive.nl/nexpres/lib/exe/fetch.php?media=nexpres:vex-1.0.tar.gz>

The VEX parser needs PLY (Python Lex-Yacc) which can be downloaded from:

  <http://www.dabeaz.com/ply>

It has been tested with PLY 3.4; older (or newer) version may or may
not work.


Starting the jive5ab service
----------------------------

Usage: jive5ab-service.py [options] station [port]

Options:
  -h, --help            show this help message and exit
  -p PORT, --port=PORT  jive5ab control port
  -d, --debug           turn on debug information
  -s, --sfxc            receive and feed data to SFXC

The service can be run in two different modes.  In the default mode it
functions as a data "source".  In this mode it generates data and
sends it to a jive5ab "sink" instance.  Use this mode to run jive5ab
at a (simulated) station.

When the --sfxc option is given, the service runs as a data "sink".
In this mode it reads packets from the network and feeds them into the
SFXC software correlator.  Use this mode to run jive5ab at the correlator.

The --port option can be used to run multiple jive5ab instances on a
single machine.  This way you can give each instance a different
control port which is used for communication between the service and
the jive5ab instance that it controls.  The default port is 2620.

The --debug option enables printing of debug information.  This option
will also prevent the service from daemonizing such that you can
actually see the debug messages.

When starting the service, you specify the two-letter station code in
the command line to let the service know its identity.  Optionally you
can specify the port number to run the service on as the last
argument, in standard web.py fashion.  By default the service runs on
port 8080.


Protocol description for the jive5ab service
--------------------------------------------

/configure

  Configures a jive5ab instance for a data transfer.  For a "source"
  instance a JSON object needs to be posted with the following
  members:

    "vex"    String

      VEX file for the experiment as a string with embedded newlines 

    "mtu"    Number

      Maximum size (in bytes) of UDP packets to send.  Must be set to
      the maximum packet size supported by the network to prevent
      fragmentation

    "destination"    Object

      Mapping from channel names (CH01, CH02, etc.) to destination.
      The destination is of the form HOSTNAME:PORT.  For example:

      {
        "CH01": "sfxc-f0:2030",
        "CH02": "sfxc-f0:2030",
        "CH03": "sfxc-f1:2030",
        "CH04": "sfxc-f1:2030"
      }

  For as "sink" instance (started with the --sfxc option) a JSON
  object needs to be posted with the following members:

    "vex"    String

      VEX file for the experiment as a string with embedded newlines 

    "mtu"    Number

      Maximum size (in bytes) of UDP packets to send.  Must be set to
      the maximum packet size supported by the network to prevent
      fragmentation

    "destination"    String

      Description of the socket where SFXC will read the data from.
      Use the same string here as listed in the correlator control
      file, e.g. "mk5:///tmp/mk5-Wb/Wb-eVLBI:0" for a local UNIX
      socket connection.

    "port"    Number

       Port number to listen on.  This is the port number that the
       "source" kive5ab instance will send the data to.

  If the configuration was successful, it returns a JSON object with
  the following members:

    "station"    String

      Two-letter station code of the jive5ab instance.

    "experiment"    String

      Experiment name.

  If the configuration was not successful, it returns a JSON object
  with the following members:

    "error"    String

      Error message that (hopefully) indicates what went wrong.


/start

   Starts the data transfer.  If successful, returns an empty JSON
   object.  If unsuccessful it returns a JSON object similar with an
   error message like the /configure request does.

/stop

   Stops the data transfer.  If successful, returns an empty JSON
   object.  If unsuccessful it returns a JSON object similar with an
   error message like the /configure request does.

/status

  Request status.  If successful, returns a JSON object with the
  following members:

    "datarate"    Number

      Current datarate in bits/s.

    "station"    String

      Two-letter station code of the jive5ab instance.

    "experiment"    String

      Experiment name.

  If unsuccessful it returns a JSON object similar with an error
  message like the /configure request does.
